# ==============================================
# EV Community Platform - Docker Compose
# ==============================================
# Complete development environment setup

version: '3.8'

services:
  # ==============================================
  # BACKEND API SERVICE
  # ==============================================
  backend:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: ev-community-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - /app/node_modules
      # Mount logs directory
      - ./logs:/app/logs
      # Mount uploads directory
      - ./uploads:/app/uploads
    depends_on:
      - redis
    networks:
      - ev-community-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================
  # REDIS CACHE SERVICE
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: ev-community-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ev-community-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # POSTGRESQL DATABASE (OPTIONAL)
  # ==============================================
  # Uncomment if you want to use PostgreSQL instead of Supabase
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: ev-community-postgres
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_DB: ev_community
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  #   networks:
  #     - ev-community-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # ==============================================
  # NGINX REVERSE PROXY (OPTIONAL)
  # ==============================================
  # Uncomment for production-like setup
  # nginx:
  #   image: nginx:alpine
  #   container_name: ev-community-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - backend
  #   networks:
  #     - ev-community-network
  #   restart: unless-stopped

  # ==============================================
  # ELASTICSEARCH (OPTIONAL)
  # ==============================================
  # Uncomment for advanced search features
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
  #   container_name: ev-community-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   networks:
  #     - ev-community-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # ==============================================
  # MONITORING SERVICES (OPTIONAL)
  # ==============================================
  # Uncomment for monitoring and observability
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: ev-community-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #   networks:
  #     - ev-community-network
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: ev-community-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
  #     - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - ev-community-network
  #   restart: unless-stopped

# ==============================================
# NETWORKS
# ==============================================
networks:
  ev-community-network:
    driver: bridge
    name: ev-community-network

# ==============================================
# VOLUMES
# ==============================================
volumes:
  redis_data:
    driver: local
    name: ev-community-redis-data
  
  # Uncomment if using PostgreSQL
  # postgres_data:
  #   driver: local
  #   name: ev-community-postgres-data
  
  # Uncomment if using Elasticsearch
  # elasticsearch_data:
  #   driver: local
  #   name: ev-community-elasticsearch-data
  
  # Uncomment if using monitoring
  # prometheus_data:
  #   driver: local
  #   name: ev-community-prometheus-data
  
  # grafana_data:
  #   driver: local
  #   name: ev-community-grafana-data

# ==============================================
# USAGE INSTRUCTIONS
# ==============================================
# Development:
#   docker-compose up -d
#   docker-compose logs -f backend
#
# Production:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# Stop services:
#   docker-compose down
#
# Remove volumes (WARNING: This will delete all data):
#   docker-compose down -v
#
# Rebuild services:
#   docker-compose up --build
#
# View logs:
#   docker-compose logs -f [service_name]
#
# Execute commands in container:
#   docker-compose exec backend npm test
#   docker-compose exec backend npm run lint
#
# Scale services:
#   docker-compose up --scale backend=3
#
# ==============================================
# ENVIRONMENT SETUP
# ==============================================
# 1. Copy .env.example to .env
# 2. Update environment variables in .env
# 3. Run: docker-compose up -d
# 4. Check health: docker-compose ps
# 5. View logs: docker-compose logs -f
#
# ==============================================
# TROUBLESHOOTING
# ==============================================
# Port conflicts:
#   - Change port mappings in this file
#   - Or stop conflicting services
#
# Permission issues:
#   - Ensure Docker has access to project directory
#   - Check file ownership and permissions
#
# Memory issues:
#   - Increase Docker memory limits
#   - Reduce service resource requirements
#
# Network issues:
#   - Check firewall settings
#   - Verify network configuration
#
# ==============================================
# SECURITY NOTES
# ==============================================
# 1. Change default passwords in production
# 2. Use secrets management for sensitive data
# 3. Enable SSL/TLS for production
# 4. Restrict network access as needed
# 5. Regular security updates for base images
# 6. Monitor container logs for security events